# Generated by Django 2.2.27 on 2025-03-28 02:16

import os

from django.db import migrations, models
from webodm import settings


ASSETS_MAP = {
    "all.zip": {"deferred_path": "all.zip", "deferred_compress_dir": "."},
    "orthophoto.tif": os.path.join("odm_orthophoto", "odm_orthophoto.tif"),
    "orthophoto.png": os.path.join("odm_orthophoto", "odm_orthophoto.png"),
    "orthophoto.mbtiles": os.path.join("odm_orthophoto", "odm_orthophoto.mbtiles"),
    "orthophoto.kmz": os.path.join("odm_orthophoto", "odm_orthophoto.kmz"),
    "georeferenced_model.las": os.path.join(
        "odm_georeferencing", "odm_georeferenced_model.las"
    ),
    "georeferenced_model.laz": os.path.join(
        "odm_georeferencing", "odm_georeferenced_model.laz"
    ),
    "georeferenced_model.ply": os.path.join(
        "odm_georeferencing", "odm_georeferenced_model.ply"
    ),
    "georeferenced_model.csv": os.path.join(
        "odm_georeferencing", "odm_georeferenced_model.csv"
    ),
    "textured_model.zip": {
        "deferred_path": "textured_model.zip",
        "deferred_compress_dir": "odm_texturing",
        "deferred_exclude_files": ("odm_textured_model_geo.glb",),
    },
    "textured_model.glb": os.path.join("odm_texturing", "odm_textured_model_geo.glb"),
    "3d_tiles_model.zip": {
        "deferred_path": "3d_tiles_model.zip",
        "deferred_compress_dir": os.path.join("3d_tiles", "model"),
    },
    "3d_tiles_pointcloud.zip": {
        "deferred_path": "3d_tiles_pointcloud.zip",
        "deferred_compress_dir": os.path.join("3d_tiles", "pointcloud"),
    },
    "dtm.tif": os.path.join("odm_dem", "dtm.tif"),
    "dsm.tif": os.path.join("odm_dem", "dsm.tif"),
    "dtm_tiles.zip": {
        "deferred_path": "dtm_tiles.zip",
        "deferred_compress_dir": "dtm_tiles",
    },
    "dsm_tiles.zip": {
        "deferred_path": "dsm_tiles.zip",
        "deferred_compress_dir": "dsm_tiles",
    },
    "orthophoto_tiles.zip": {
        "deferred_path": "orthophoto_tiles.zip",
        "deferred_compress_dir": "orthophoto_tiles",
    },
    "cameras.json": "cameras.json",
    "shots.geojson": os.path.join("odm_report", "shots.geojson"),
    "report.pdf": os.path.join("odm_report", "report.pdf"),
    "ground_control_points.geojson": os.path.join(
        "odm_georeferencing", "ground_control_points.geojson"
    ),
}


def fix_assets_path(apps, schema_editor):
    TaskAsset = apps.get_model("app", "TaskAsset")

    for task_asset in TaskAsset.objects.all():
        task_asset.path = get_asset_local_path(task_asset.task, task_asset.name)
        task_asset.save(update_fields=("path",))


def get_asset_local_path(task, asset: str):
    if asset in ASSETS_MAP:
        value = ASSETS_MAP[asset]
        if isinstance(value, str):
            return assets_path(task, value)

        elif isinstance(value, dict):
            if "deferred_path" in value and "deferred_compress_dir" in value:
                return value["deferred_path"]

    return assets_path(task, asset)


def assets_path(task, *args):
    return os.path.join(
        settings.MEDIA_ROOT,
        assets_directory_path(task.id, task.project.id, ""),
        "assets",
        *args,
    )


def assets_directory_path(taskId, projectId, filename):
    return "{0}{1}".format(task_directory_path(taskId, projectId), filename)


def task_directory_path(taskId, projectId):
    return "{0}/{1}/".format(projectId, taskId)


def empty_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0053_orthophoto_task_assets_path"),
    ]

    operations = [
        migrations.AddField(
            model_name="taskasset",
            name="path",
            field=models.TextField(
                default="",
                help_text="The current path of asset",
                verbose_name="Current path",
            ),
            preserve_default=False,
        ),
        migrations.RunPython(fix_assets_path, empty_func),
        migrations.AlterField(
            model_name="taskasset",
            name="name",
            field=models.CharField(
                blank=True,
                help_text="The task asset path after task path",
                max_length=255,
                null=True,
                verbose_name="Name",
            ),
        ),
    ]
